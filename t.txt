
using System;
using System.Collections.Generic;
using System.IO;
using System.Data.SQLite;

class Program
{
    static int fileCount = 0;
    static List<string> monitoredDrives = new List<string>();
    static SQLiteConnection connection;

    static void Main()
    {
        // Initialize the SQLite connection and create the table if it doesn't exist
        InitializeDatabase();

        Console.WriteLine("Monitoring started. Press any key to exit.");
        Console.Read();

        // Close the SQLite connection
        connection.Close();
    }

    static void InitializeDatabase()
    {
        string dbFilePath = "filestats.db";
        connection = new SQLiteConnection($"Data Source={dbFilePath};Version=3;");
        connection.Open();
        string createTableQuery = "CREATE TABLE IF NOT EXISTS FileStats (FilePath TEXT PRIMARY KEY, Frequency INTEGER DEFAULT 0);";
        SQLiteCommand createTableCommand = new SQLiteCommand(createTableQuery, connection);
        createTableCommand.ExecuteNonQuery();

        // Start monitoring for new drives
        MonitorDrives();
    }

    static void MonitorDrives()
    {
        DriveInfo[] drives = DriveInfo.GetDrives();
        foreach (DriveInfo driveInfo in drives)
        {
            if (driveInfo.DriveType == DriveType.Removable && !monitoredDrives.Contains(driveInfo.Name))
            {
                Console.WriteLine($"USB drive inserted: {driveInfo.Name}");
                monitoredDrives.Add(driveInfo.Name);

                // Create a new instance of FileSystemWatcher to monitor the USB drive
                FileSystemWatcher usbWatcher = new FileSystemWatcher();
                usbWatcher.Path = driveInfo.RootDirectory.FullName;
                usbWatcher.IncludeSubdirectories = true;
                usbWatcher.Created += OnFileCopied;

                // Start monitoring the USB drive
                usbWatcher.EnableRaisingEvents = true;
            }
        }
    }

    static void OnFileCopied(object sender, FileSystemEventArgs e)
    {
        fileCount++;
        Console.WriteLine($"File copied to USB: {e.FullPath}");
        Console.WriteLine($"Total files copied: {fileCount}");

        // Update the file frequency in the SQLite database
        UpdateFileFrequency(e.FullPath);
    }

    static void UpdateFileFrequency(string filePath)
    {
        string selectQuery = "SELECT Frequency FROM FileStats WHERE FilePath = @FilePath;";
        SQLiteCommand selectCommand = new SQLiteCommand(selectQuery, connection);
        selectCommand.Parameters.AddWithValue("@FilePath", filePath);
        object result = selectCommand.ExecuteScalar();

        if (result != null && result != DBNull.Value)
        {
            int frequency = Convert.ToInt32(result);
            frequency++;

            string updateQuery = "UPDATE FileStats SET Frequency = @Frequency WHERE FilePath = @FilePath;";
            SQLiteCommand updateCommand = new SQLiteCommand(updateQuery, connection);
            updateCommand.Parameters.AddWithValue("@Frequency", frequency);
            updateCommand.Parameters.AddWithValue("@FilePath", filePath);
            updateCommand.ExecuteNonQuery();
        }
        else
        {
            string insertQuery = "INSERT INTO FileStats (FilePath, Frequency) VALUES (@FilePath, 1);";
            SQLiteCommand insertCommand = new SQLiteCommand(insertQuery, connection);
            insertCommand.Parameters.AddWithValue("@FilePath", filePath);
            insertCommand.ExecuteNonQuery();
        }
    }
}
